---
- name: Run pentesting tools
  hosts: all
  tasks:
    - name: Run naabu scan
      community.docker.docker_container:
        name: naabu_scan
        image: "projectdiscovery/naabu"
        command: "-list /tmp/targets.txt -o /tmp/scan_results/naabu-results.txt"
        volumes:
          - "~/:/tmp"
        state: started
        detach: true
        auto_remove: true
      register: naabu_container_result

    - name: Wait for naabu container to complete successfully
      community.docker.docker_container_info:
        name: naabu_scan
      register: naabu_container_info
      until: naabu_container_info.container.State.Running == false and naabu_container_info.container.State.ExitCode == 0
      retries: 120
      delay: 1
      ignore_errors: true

    - name: Display naabu results
      command: cat ~/scan_results/naabu-results.txt
      register: naabu_results
      
    - name: Show naabu results
      debug:
        msg: "{{ naabu_results.stdout }}"

    - name: Run httpx scan
      community.docker.docker_container:
        name: httpx_scan
        image: "projectdiscovery/httpx"
        command: "-l /tmp/scan_results/naabu-results.txt -o /tmp/scan_results/httpx-results.txt"
        volumes:
          - "~/:/tmp"
        state: started
        detach: true
        auto_remove: true
      register: httpx_container_result

    - name: Wait for httpx container to complete successfully
      community.docker.docker_container_info:
        name: httpx_scan
      register: httpx_container_info
      until: httpx_container_info.container.State.Running == false and httpx_container_info.container.State.ExitCode == 0
      retries: 120
      delay: 1
      ignore_errors: true

    #- name: Display httpx results
    #  command: cat ~/scan_results/httpx-results.txt
    #  register: httpx_results
      
    #- name: Show httpx results
    #  debug:
    #    msg: "{{ httpx_results.stdout }}"

    - name: Run nuclei scan
      community.docker.docker_container:
        name: nuclei_scan
        image: "projectdiscovery/nuclei"
        command: "-list /tmp/scan_results/httpx-results.txt -j -o /tmp/scan_results/nuclei-results.json"
        volumes:
          - "~/:/tmp"
        state: started
        detach: true
        auto_remove: true
      register: nuclei_container_result

    #As nuclei takes an indeterminate amount of time, check for container status each 30 seconds in a 90 minutes frame
    - name: Wait for nuclei container to complete successfully
      community.docker.docker_container_info:
        name: nuclei_scan
      register: nuclei_container_info
      until: nuclei_container_info.container.State.Running == false and nuclei_container_info.container.State.ExitCode == 0
      retries: 540
      delay: 30
      ignore_errors: true

    #- name: Display nuclei results
    #  command: cat ~/scan_results/nuclei-results.json
    #  register: nuclei_results

    #- name: Show nuclei results
    #  debug:
    #    msg: "{{ nuclei_results.stdout }}"

    - name: Send nuclei results to Defect Dojo
      vars:
        scan_type: Nuclei Scan
      command: > 
        curl -X POST "{{ pipeline_conf.dojo_url }}"
        -H "Authorization: Token {{ pipeline_conf.dojo_api_key }}"
        -F "file=@scan_results/nuclei-results.json"
        -F "engagement={{ pipeline_conf.engagement_id }}"
        -F "scan_type={{ scan_type }}"
        -F "verified=true"
        -F "active=true"
        -F "skip_duplicates=false"
        -F "close_old_findings=true"

    - name: Run OWASP Zap scan
      ansible.builtin.shell: |        
        # Function to run ZAP baseline scan
        run_zap_scan() {
            local target=$1
            echo "Scanning target: $target"
            docker run --rm -v {{ reports_dir }}:/zap/wrk/:rw --user root -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t $target -r $(echo $target | sed 's/[^a-zA-Z0-9]/_/g').xml
        }

        # Read targets and run scans
        while IFS= read -r target
        do
            run_zap_scan $target
        done < "{{ targets_file }}"

        # Upload each XML report to Defect Dojo
        for filename in $(ls {{ reports_dir }}/*.xml); do
            echo "Uploading $filename to Defect Dojo"
            curl -X POST "{{ pipeline_conf.dojo_url }}" -H "Authorization: Token {{ pipeline_conf.dojo_api_key }}" -F "file=@${filename}" -F "engagement={{ pipeline_conf.daily_scan_engagement_id }}" -F "scan_type={{ scan_type }}" -F "verified=true" -F "skip_duplicates=false" -F "close_old_findings=true"
        done
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"  # Ensure docker and python are in the path
      vars:
        scan_type: ZAP Scan
        targets_file: "/home/ubuntu/scan_results/httpx-results.txt"
        reports_dir: "/home/ubuntu/scan_results/zap_reports"
      ignore_errors: true


    #- name: Display zap results
    #  command: cat ~/scan_results/zap_combined_report.json
    #  register: zap_results

    # - name: Show zap results
    #   debug:
    #     msg: "{{ zap_results.stdout }}"
