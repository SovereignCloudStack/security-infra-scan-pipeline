---
#Web service scan based in OWASP ZAP 'Release' status rulesets
- name: Perform scan with OWASP ZAP
  hosts: all
  tasks:
    #Targets are fetched from httx scan results, this is, full url addresses.
    - name: Fetch httpx data
      ansible.builtin.slurp:
        src: "{{ scan_results_dir }}/httpx-results.txt"
      register: httpx_results

    #Invoke ZAP container, waiting for the container to complete (reports being generated)
    #Based on the pipeline being triggered different scans are performed
    #For Daily pipeline trigger => zap-baseline.py - runs ZAP spider + ajax spider + passive scan
    #For Weekly pipeline trigger => zap-full-scan.py - runs ZAP spider + ajax spider + full active scan
    #Output: This scanner produces one xml report for each target being analyzed
    - name: Run zap scan
      community.docker.docker_container:
        name: "zap"
        image: "ghcr.io/zaproxy/zaproxy:stable"
        command: "{{ zap_script }} -t {{ zj_item }} -x {{ zj_item | regex_replace('[^a-zA-Z0-9]', '_') }}.xml"
        state: "started"
        detach: false
        timeout: 120
        volumes:
          - "{{ scan_results_dir }}/zap_reports:/zap/wrk:rw"
      register: zap
      failed_when: "zap.status == 3"
      loop: "{{ httpx_results['content'] | b64decode | split('\n') }}"
      loop_control:
        loop_var: zj_item
      when:
        - "zj_item != ''"

    # Small task to list generated zap xml reports.
    - name: Find Zap reports
      ansible.builtin.find:
        paths: "{{ scan_results_dir }}/zap_reports"
        patterns: "*.xml"
      register: "zap_reports"

    # Small task to read previous listed xml reports content.
    # Content is stored as base64 in a variable
    - name: Read in ZAP reports content
      ansible.builtin.slurp:
        src: "{{ item.path }}"
      loop: "{{ zap_reports.files }}"
      register: "zap_reports_content"

    # Iterate over stored reports content, decode them from base64 and send it
    # to a defectdojo instance. Specific defecdojo variables are defined in 
    # zuul config file and secrets.
    - name: Send Zap results to Defect Dojo
      #  no_log: true
      ansible.builtin.uri:
        url: "{{ pipeline_conf.dojo_url }}/api/v2/import-scan/"
        headers:
          Authorization: "{{ ('Token ' + pipeline_conf.dojo_api_key) if pipeline_conf.dojo_api_key is defined else pipeline_conf.dojo_auth }}"
        method: "POST"
        body_format: "form-multipart"
        body:
          engagement: "{{ pipeline_conf[engagement] }}"
          scan_type: "ZAP Scan"
          verified: "true"
          active: "true"
          skip_duplicates: "false"
          close_old_findings: "true"
          file:
            filename: "{{ zj_item['source'] | basename }}"
            content: "{{ zj_item['content'] | b64decode }}"
        status_code: [200, 201]
      loop: "{{ zap_reports_content.results }}"
      loop_control:
        loop_var: zj_item
      when:
        - "engagement is defined and engagement"
        - "pipeline_conf is defined"
